const int LED_PINS[] = {3, 4, 5, 6, 7, 8};  
const int buzzerPin = 9;
const int buttonPin = 11;
// We'll set up an array with the notes we want to play
// change these values to make different songs!

// Length must equal the total number of notes and spaces 

const int songLength = 102;

// Notes is an array of text characters corresponding to the notes
// in your song. A # represents a rest (no tone)

char notes[] = "gecegCEDCe#gggEDCbabCCgecgecegCEDCe#gggEDCbabCCgecEEEFGGFEDEFFFEDCbabCe#ggCCCbaaaDFEDCCbggCDEFGCDEFDC "; // a # represents a rest

// Beats is an array of values for each note and rest.
// A "1" represents a quarter-note, 2 a half-note, etc.
// Don't forget that the rests (#) need a length as well.

int beats[] = {3, 1, 4, 4, 4, 8, 3, 1, 4, 4, 4, 8, 2, 2, 6, 2, 4, 8, 3, 1, 4, 4, 4, 4, 8, 3,
1, 4, 4, 4, 8, 3, 1, 4, 4, 4, 8, 2, 2, 6, 2, 4, 8, 3, 1, 4, 4, 4, 4, 4, 2, 2, 4, 4, 4, 8, 2,
2, 4, 4, 4, 8, 4, 6, 2, 4, 8, 3, 1, 6, 4, 4, 8, 4, 4, 4, 2, 2, 4, 4, 4, 4, 2, 2, 2, 2, 4, 4,
2, 2, 6, 2, 2, 2, 8, 2, 2, 6, 2, 4, 8, 1}; // a # represents a rest

// Beats is an array values for each note and rest.
// A "1" represents a quarter-note, 2 a half-note, etc.
// Don't forget that the rests (#) need a length as well.

// The tempo is how fast to play the song.
// To make the song play faster, decrease this value.

int tempo = 150;
bool wait = true;
int led = 0;
int l;
void setup() 
{
  pinMode(buzzerPin, OUTPUT); //Set up buzzer
  for (l = 0; l <= 5; l++) {
    pinMode(LED_PINS[l], OUTPUT);
  } //Loop through all of the LEDs and set them to outputs
}


void loop() 
{
  
  int i, k, duration; 
 
    for (i = 0; i < songLength; i++) // step through the song arrays
    {
      duration = beats[i] * tempo;  // length of note/rest in ms
      
      if (notes[i] == '#')          // is this a rest? 
      {
        for (k = 0; k <= 5; k++) {
          digitalWrite(LED_PINS[k], HIGH); // Light up all LEDs
        }
        wait = false; //Don't wait at the end, the delay will be here
        delay(duration); //Wait for rest to finish
        for (k = 0; k <= 5; k++) {
          digitalWrite(LED_PINS[k], LOW);
        } //Turn off all LEDs after rest is finished
      }
      else                          
      {
        wait = true; //It's not a rest, so wait at the end
        tone(buzzerPin, frequency(notes[i]), duration); // Play the note
        digitalWrite(LED_PINS[led], HIGH); //Display next LED
        digitalWrite(LED_PINS[led - 1], LOW); //Turn off previous LED
        led++; //Advance the LED count to loop through the LEDs
        if (led == 6) { //If the value starts to overflow...
          led = 0; //Reset it
          digitalWrite(LED_PINS[5], HIGH); //Turn last LED on
        }
        else if (led == 0) {
          digitalWrite(LED_PINS[5], LOW); //If led is 0, turning off [1ed - 1] won't work; so manually turn off the last LED. 
        }
           
      }
      if (wait == true) {
        delay(duration); // wait for tone to finish if it wasn't a rest
      }
      delay(tempo/10); //brief pause
                    
    }
  
  //Play song only once:
  //while(true){}
}


int frequency(char note) 
{
  // This function takes a note character (a-g), and returns the
  // corresponding frequency in Hz for the tone() function.
  
  int i;
  const int numNotes = 15;  // number of notes we're storing
  
  // The following arrays hold the note characters and their
  // corresponding frequencies. A "C" note is uppercase
  // to separate it from the first lowercase "c". If you want to
  // add more notes, you'll need to use unique characters.

  // For the "char" (character) type, we put single characters
  // in single quotes.
   char names[] = {'c', 'd', 'e', 'f', '#', 'g', 'a', 'b', 'C', 'D', 'E', 'F', 'G', 'A', 'B'};
  int frequencies[] = {262, 294, 330, 349, 370, 392, 440, 494, 523, 587, 659, 699, 784, 880, 989};
  
  // Now we'll search through the letters in the array, and if
  // we find it, we'll return the frequency for that note.
  
  for (i = 0; i < numNotes; i++)  // Step through the notes
  {
    if (names[i] == note)         // Is this the one?
    {
      return(frequencies[i]);     // Return the frequency
    }
  }
  return(0);  // We looked through everything and didn't find it,
              // but we still need to return a value, so return 0.
}

